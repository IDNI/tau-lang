# LICENSE
# This software is free for use and redistribution while including this
# license notice, unless:
# 1. is used for commercial or non-personal purposes, or
# 2. used for a product which includes or associated with a blockchain or other
# decentralized database technology, or
# 3. used for a product which includes or associated with the issuance or use
# of cryptographic or electronic currencies/coins/tokens.
# On all of the mentioned cases, an explicit and written permission is required
# from the Author (Ohad Asor).
# Contact ohad@idni.org for requesting a permission. This license may be
# modified over time by the Author.

@use char classes eof, space, digit, xdigit, alpha, alnum, punct, printable.

# start symbol
#
start                  => (inputs | builder | library | nso_rr | gssotc_rr) _.


# main posibilities
#
gssotc_rr              => gssotc_rec_relations (_ tau _ ';'):gssotc_main.
gssotc_rec_relations   => (_ gssotc_rec_relation)*.
gssotc_rec_relation    => (bf_rec_relation | wff_rec_relation | tau_rec_relation)
                                :gssotc_rec_relation_form _ '.'.
nso_rr                 => nso_rec_relations    (_ wff _ '.'):nso_main.
nso_rec_relations      => (_ nso_rec_relation)*.
nso_rec_relation       => (bf_rec_relation | wff_rec_relation)
                                :nso_rec_relation_form _ '.'.
tau_rec_relation       => tau_ref _ ":::=" _ tau.
wff_rec_relation       => wff_ref _  "::=" _ wff.
bf_rec_relation        => bf_ref  _   ":=" _ bf.

inputs                 => _ '<' { _ input } _ '.'.
input                  => in _ ':' _ '{' _ source_binding _ '}'.

library                => ((_ (wff_rule | bf_rule | tau_rule):rule)*):rules.
tau_rule               => tau:tau_matcher _ ":::=" _ (tau | tau_cb):tau_body _ '.'.
wff_rule               => wff:wff_matcher _  "::=" _ (wff | wff_cb):wff_body _ '.'.
bf_rule                => bf :bf_matcher  _   ":=" _ (bf  | bf_cb) :bf_body  _ '.'.

builder                => _ builder_head _ builder_body _ '.'.
builder_head           => '(' _ capture (__ capture)* _ ')'.
builder_body           => ("=:"   _ bf) :bf_builder_body
                        | ("=::"  _ wff):wff_builder_body
                        | ("=:::" _ tau):tau_builder_body.


# tau, wff and bf expressions
#
tau                    => ('(' _ tau _ ')')                  :tau_parenthesis
                        | ( wff )                            :tau_wff
                        | (sym [_ offsets] _ ref_args)       :tau_ref
                        | (tau _ "|||" _ tau)                :tau_or
                        | (tau _ "&&&" _ tau)                :tau_and
                        | ("~" _ tau)                        :tau_neg
                        |                                     capture.
wff                    => ('(' _ wff _ ')')                  :wff_parenthesis
                        | (wff _ '?' _ wff _ ':' _ wff)      :wff_conditional
                        | ("bool_all"   __ q_bool_var __ wff):wff_ball
                        | ("bool_ex"    __ q_bool_var __ wff):wff_bex
                        | ("all"        __ q_var      __ wff):wff_all
                        | ("ex"         __ q_var      __ wff):wff_ex
                        | (sym [_ offsets] _ ref_args)       :wff_ref
                        | (wff   _ "->"  _ wff)              :wff_imply
                        | (wff   _ "<->" _ wff)              :wff_equiv
                        | (wff   _ "||"  _ wff)              :wff_or
                        | (wff   _ '^'   _ wff)              :wff_xor
                        | (wff   _ "&&"  _ wff)              :wff_and
                        | ('!'   _ wff)                      :wff_neg
                        | 'T'                                :wff_t
                        | 'F'                                :wff_f
# relational operators
#
# they are named bf_* as they involve boolean functions,
# but they are not boolean functions themselves, they return a T/F wff value
# and hence, should be considered as wffs
                        | (bf    _ "<="  _ q_var _ "<=" _ bf):bf_interval
                        | (bf    _ "!="  _ bf)               :bf_neq
                        | (bf    _ '='   _ bf)               :bf_eq
                        | (bf    _ "!<=" _ q_var)            :bf_nleq_lower
                        | (q_var _ "!<=" _ bf)               :bf_nleq_upper
                        | (bf    _ ">"   _ bf)               :bf_greater
                        | (bf    _ "<="  _ bf)               :bf_less_equal
                        | (bf    _ "<"   _ bf)               :bf_less
                        |                                     capture
                        |                                     bool_variable
                        |                                     uninterpreted_constant.
bf                     => ('(' _ bf _ ')')                   :bf_parenthesis
                        | ('S' _ '(' _ bf _ ')')             :bf_splitter
                        | (sym [_ offsets] _ ref_args)       :bf_ref
                        | (bf _       '|'  _  bf)            :bf_or
                        | (bf _       '+'  _  bf)            :bf_xor
                        | (bf ( _ | _ '&' _ ) bf)            :bf_and
                        | (bf _ "'")                         :bf_neg
                        | ('{' _ constant _ '}')             :bf_constant
                        | '1'                                :bf_t
                        | '0'                                :bf_f
                        |                                     capture
                        |                                     variable
                        |                                     uninterpreted_constant.

ref_args               => '(' [ (_ bf:ref_arg) (_ ',' _ ref_arg)* ] _ ')'.

# callbacks

# callbacks must be used in the following cases:
#
# 1.- underlying boolean algebras operations: and, or, xor, neg, less,
# less_equal, greater, subs, eq, neq, is_zero, is_one,... In this case, no
# other way we have to call the uderlying operations of the boolean algebra
# 2.- speed up computations: has_clashing_subformulas, has_subformula,
# remove_existential... In this case, we could use the the callback to
# avoid the creation of intermediate formulas. For instance, if we want
# to check if a formula has a subformula, we could use the callback to
# avoid the creation of the subformulas to check that point.
# 3.- to create new subformulas in other rules, for instance, to create a
# new formula that is the substitution of a variable by a constant.

# bultin_args, type is needed to capture appropriate typed arguments
# do not try to simplify this
bf_cb_args1            => __ bf:bf_cb_arg.
bf_cb_args2            => bf_cb_args1 bf_cb_args1.
bf_cb_args3            => bf_cb_args2 bf_cb_args1.
bf_cb_args4            => bf_cb_args3 bf_cb_args1.
wff_cb_args1           => __ wff:wff_cb_arg.
wff_cb_args2           => wff_cb_args1 wff_cb_args1.
wff_cb_args3           => wff_cb_args2 wff_cb_args1.
wff_cb_args4           => wff_cb_args3 wff_cb_args1.
tau_cb_args1           => __ (capture | tau):tau_cb_arg.
tau_cb_args2           => tau_cb_args1 tau_cb_args1.
tau_cb_args3           => tau_cb_args2 tau_cb_args1.

tau_cb => ("tau_collapse_positives_cb" (tau_cb_args3 | tau_cb_args2))
                                                     :tau_collapse_positives_cb
        | ("tau_positives_upwards_cb"   tau_cb_args2):tau_positives_upwards_cb.
wff_cb => ("bf_eq_cb"  bf_cb_args1 wff_cb_args2)     :bf_eq_cb
        | ("bf_neq_cb" bf_cb_args1 wff_cb_args2)     :bf_neq_cb
        | ("wff_has_clashing_subformulas_cb" wff_cb_args2)
                                                :wff_has_clashing_subformulas_cb
        | ("wff_has_subformula_cb"      wff_cb_args3):wff_has_subformula_cb
        | ("wff_remove_existential_cb"  wff_cb_args2):wff_remove_existential_cb
        | ("wff_remove_bexistential_cb" wff_cb_args4):wff_remove_bexistential_cb
        | ("wff_remove_buniversal_cb"   wff_cb_args4):wff_remove_buniversal_cb.
bf_cb  => ("bf_is_zero_cb"              bf_cb_args2) :bf_is_zero_cb
        | ("bf_is_one_cb"               bf_cb_args2) :bf_is_one_cb
        | ("bf_has_subformula_cb"       bf_cb_args3) :bf_has_subformula_cb
        | ("bf_remove_funiversal_cb"    bf_cb_args4) :bf_remove_funiversal_cb
        | ("bf_remove_fexistential_cb"  bf_cb_args4) :bf_remove_fexistential_cb
        | ("bf_and_cb"                  bf_cb_args2) :bf_and_cb
        | ("bf_or_cb"                   bf_cb_args2) :bf_or_cb
        | ("bf_xor_cb"                  bf_cb_args2) :bf_xor_cb
        | ("bf_neg_cb"                  bf_cb_args1) :bf_neg_cb
        | ("bf_normalize_cb"            bf_cb_args1) :bf_normalize_cb.

# variables
charvar                => (alpha & ~'T' & ~'F') digit*.
bool_variable          => '?' charvar.
variable               => charvar | (in | out):io_var.
in                     => ("i_" chars):in_var_name  '[' offset ']'.
out                    => ("o_" chars):out_var_name '[' offset ']'.
capture                => '$' charvar.
q_bool_var             => capture | bool_variable.
q_var                  => capture | variable.

# offsets
offsets                => '[' _ offset (_ ',' _ offset)* _ ']'.
offset                 => num | capture | shift | (variable & ~io_var).
shift                  => (capture | (variable & ~io_var)) _ '-' _ num.
num                    => digits.

#constants
uninterpreted_constant => '<' ((chars | _ ) ':' chars):uninter_const_name _ '>'.
constant               => binding | capture.
binding                => ((chars _ | _):type ':' _ source):source_binding
                        | chars                            :named_binding.
source                 => (alnum | punct):src_c [ (src_c | space)* src_c ].

# common elements
chars                  => alpha alnum*.
digits                 => digit+.
sym                    => chars.

# whitespace and comments
comment                => '#' (printable | '\t')* ('\n' | '\r' | eof).
__                     => (space | comment) _.   # whitespace
_                      => [ __ ].                # optional whitespace


################################################################################

# cli related rules, using cli as starting point for parsing
#
# TODO do the same with the other starting points: library, inputs, builder,
# nso_rr, nso, gssotc, gssotc_rr... depending on the use case of the grammar.
cli                    => _ cli_command _ ('.' _ cli_command _)*.
cli_command            =>
          ("q" | "quit")   :quit_sym                          :quit_cmd
        | ("v" | "version"):version_sym                       :version_cmd
        | ("c" | "clear")  :clear_sym                         :clear_cmd
        | (("h" | "help")  :help_sym   [__ help_arg])         :help_cmd
        | ("file"          :file_sym    __ q_string)          :file_cmd
        | ("valid"         :valid_sym   __ gssotc_rr)         :valid_cmd
        | ("sat"           :sat_sym     __ gssotc_rr)         :sat_cmd
        | ("unsat"         :unsat_sym   __ gssotc_rr)         :unsat_cmd
        | ("solve"         :solve_sym   __
                                wff_cmd_arg:solve_cmd_arg)    :solve_cmd
        | (("e" | "execute"):execute_sym __
                (tau | gssotc_rr):execute_cmd_arg)            :execute_cmd
        | (("n" | "normalize")
                        :normalize_sym __ normalize_cmd_arg)  :normalize_cmd
        | (("i" | "inst" | "instantiate")
                :inst_sym  __ variable    __ wff_cmd_arg __
                                        wff_cmd_out_arg)      :wff_inst_cmd
        | (("s" | "subst" | "substitute")
                :subst_sym __ nf_cmd_arg _ '[' _
                   nf_cmd_arg _ '/' _ nf_cmd_arg _ ']')       :subst_cmd
        | (      inst_sym  __ variable   __ bf_cmd_arg  __
                                        bf_cmd_out_arg)       :bf_inst_cmd
# normal forms
        | ("dnf":dnf_sym __ nf_cmd_arg)                       :dnf_cmd
        | ("cnf":cnf_sym __ nf_cmd_arg)                       :cnf_cmd
        | ("anf":anf_sym __ nf_cmd_arg)                       :anf_cmd
        | ("nnf":nnf_sym __ nf_cmd_arg)                       :nnf_cmd
        | ("pnf":pnf_sym __ nf_cmd_arg)                       :pnf_cmd
        | ("mnf":mnf_sym __ nf_cmd_arg)                       :mnf_cmd
        | ("snf":snf_sym __ nf_cmd_arg)                       :snf_cmd
        | ("onf":onf_sym __ variable __ onf_cmd_arg)          :onf_cmd
# rec relations
        | ("def":def_sym)                                     :def_list_cmd
        | (      def_sym __ gssotc_rec_relation_form)         :def_rr_cmd
# TODO (LOW) rename memory to repl_indx or seomthing like that
        | (      def_sym __ ("d" | "del" | "delete"):del_sym
                                                    __ memory):def_del_cmd
        | (      def_sym __ clear_sym)                        :def_clear_cmd
        | (      def_sym __ memory)                           :def_print_cmd
# outputs
        | (("m" | "mem" | "memory"):memory_sym)               :memory_list_cmd
	| (memory_sym __ del_sym __ memory)                   :memory_del_cmd
        | (memory_sym __ clear_sym)                           :memory_clear_cmd
        | (memory_sym __ memory)                              :memory_print_cmd
        | (memory_sym __
		(bf | wff | tau):memory_store_cmd_arg)        :memory_store_cmd
#qelim
        | ("qelim":qelim_sym __ wff_cmd_arg)                  :qelim_cmd
# option commands
        | ("get":get_sym  [__ option])                        :get_cmd
# TODO (VERY_HIGH) fix this, we could say 'set severity true'... use another case for this
        | ("set":set_sym   __ option
                                (__ | _ '=' _) option_value)  :set_cmd
        | ("toggle":toggle_sym __ bool_option)                :toggle_cmd
        | comment.

# command arguments
#
bf_cmd_arg             => memory | bf_selection  | bf.
bf_cmd_out_arg         => memory | bf_selection.
wff_cmd_arg            => memory | wff_selection | wff.
wff_cmd_out_arg        => memory | wff_selection.
nf_cmd_arg             => memory | bf | wff.
onf_cmd_arg            => memory | wff.
normalize_cmd_arg      => memory | bf | wff | nso_rr.

# symbols usable for detailed help message
#
help_arg               => help_sym | version_sym | quit_sym
                        | clear_sym | get_sym | set_sym | toggle_sym | file_sym
                        | memory_sym | abs_memory_sym | rel_memory_sym
                        | selection_sym | def_sym
                        | inst_sym | subst_sym | normalize_sym | execute_sym
                        | solve_sym | valid_sym | sat_sym | unsat_sym
                        | dnf_sym | cnf_sym | anf_sym | snf_sym
                        | nnf_sym | pnf_sym | mnf_sym | onf_sym | qelim_sym
                        | ("example" 's'?):examples_sym.

# memory
#
memory                 => ( "%" :rel_memory_sym [digits:memory_id]):rel_memory
                        | (("%-":abs_memory_sym
                                        | memory_sym __) memory_id):abs_memory.

# selection reference
#
selection_sym          => "s" | "selection".
# TODO (HIGH) selection should take outputs as arguments
wff_selection          => selection_sym __ digits.
bf_selection           => selection_sym __ digits.
bf_var_selection       => selection_sym __ digits.
wff_var_selection      => selection_sym __ digits.

# options and their values
#
option                 => bool_option
                        | ("sev" | "severity")      :severity_opt  :enum_option.
bool_option            => ("s" | "status")          :status_opt
                        | ("c" | "color" | "colors"):colors_opt
                        | ("d" | "dbg"   | "debug") :debug_repl_opt.
option_value           => option_value_true | option_value_false | severity.
option_value_true      => "t" | "true"  | "on"  | "1" | "y" | "yes".
option_value_false     => "f" | "false" | "off" | "0" | "n" | "no".
severity               => ("e" | "error"):error_sym
                        | ("i" | "info" ):info_sym
                        | ("d" | "debug"):debug_sym
                        | ("t" | "trace"):trace_sym.


# shaping of the parsed tree
#
@trim _, __.              # trim whitespace

# remove terminals we don't need after parsing
@trim children terminals
        gssotc_main, nso_main, gssotc_rec_relation, nso_rec_relation,
        tau_rec_relation, wff_rec_relation, bf_rec_relation, inputs, input,
        tau_rule, wff_rule, bf_rule, builder, builder_head,
        tau_builder_body, wff_builder_body, bf_builder_body,
        tau_parenthesis, tau_or, tau_and, tau_neg, tau_wff,
        wff_parenthesis, wff_conditional, wff_ball, wff_bex, wff_all, wff_ex,
        wff_imply, wff_equiv, wff_or, wff_xor, wff_and, wff_neg, wff_t, wff_f,
        bf_interval, bf_neq, bf_eq, bf_nleq_lower, bf_nleq_upper, bf_greater,
        bf_less_equal, bf_less, bf_parenthesis, bf_splitter, bf_all, bf_ex,
        bf_or, bf_xor, bf_and, bf_neg, bf_constant, bf_t, bf_f, ref_args,
        tau_collapse_positives_cb, tau_positives_upwards_cb,
        bf_eq_cb, bf_neq_cb, wff_has_clashing_subformulas_cb,
        wff_has_subformula_cb, wff_remove_existential_cb,
        wff_remove_bexistential_cb, wff_remove_buniversal_cb, bf_is_zero_cb,
        bf_is_one_cb, bf_has_subformula_cb, bf_remove_funiversal_cb,
        bf_remove_fexistential_cb, bf_and_cb, bf_or_cb, bf_xor_cb, bf_neg_cb,
        offsets, shift, source_binding, cli, help_sym, version_sym, quit_sym,
        clear_sym, get_sym, set_sym, set_cmd, toggle_sym, file_sym,
        memory_sym, abs_memory_sym, rel_memory_sym, selection_sym, def_sym,
        inst_sym, subst_sym, normalize_sym, execute_sym, solve_sym, valid_sym,
        sat_sym, unsat_sym, dnf_sym, cnf_sym, anf_sym, nnf_sym, pnf_sym, snf_sym,
        mnf_sym, onf_sym, examples_sym, del_sym, severity_opt, status_opt,
        colors_opt, debug_repl_opt, option_value_true, option_value_false,
        error_sym, debug_sym, trace_sym, info_sym, qelim_sym, uninterpreted_constant,
        subst_cmd, bf_normalize_cb.

# inline intermediate nodes and eliminate parenthesis
@inline char classes, chars, q_var, q_bool_var, src_c, tau_cb, wff_cb, bf_cb,
        bf_cb_args1, bf_cb_args2, bf_cb_args3, bf_cb_args4,
        wff_cb_args1, wff_cb_args2, wff_cb_args3, wff_cb_args4,
        tau_cb_args1, tau_cb_args2, tau_cb_args3,
        bf_cmd_arg, bf_cmd_out_arg, wff_cmd_arg, wff_cmd_out_arg,
        bf  > bf_parenthesis  > bf,
        wff > wff_parenthesis > wff,
        tau > tau_parenthesis > tau.