# To run it you need to compile the project using release.sh (customized with
# your settings if needed) and then execute the run.sh whithin the demo directory
# as follows:
#
# ./run.sh demo_3.1-interpreter_sbf.tau
#
# This demo should work under any *nix flavour due to the paths used for files.
# To run it under windows you will need to change the paths to the files.

# This demo demonstrate the workings of the interpreter.

# To run a tau program we need to define input and output variables.
# If you attempt to run a program without defining the input and output variables,
# the interpreter will throw an error.

# The following program just echo the inputs to the outputs, but we have not
# define inputs yet! So we would get an error.

r i1[t] = o1[t]

# Let us define the inputs for variable i1 directly from the console (of type sbf)

sbf i1 = console

# However, we still need to define the output variable. If we try to run the above
# program, we will still get an error.

r i1[t] = o1[t]

# Let us define the output variable as the console

sbf o1 = console

# In order to check the defined inputs and outputs, we can run the following command:

defs

# Now we can run the program:

r i1[t] = o1[t]
0
1
0
1
0

# You would see the negations of you have seen previously in the console as that
# is what we have defined as the output.
#
# Of course, we could also deal with more complex programs. The above examples are quite
# simple but are provided to show the basic workings of the interpreter.
# Let us consider the following example based on the Fibonacci sequence:

r o1[t] = o1[t-1] + o1[t-2] && o1[0] = 1 && o1[1] = 1
n
n
n
n
n
n
q


# We can also execute specifications involving inequalities:

r o1[t] != 0 && o1[t] != 1
n
n
n
n
n
n
q


# and also include uninterpreted constants:

r o1[t] = <:a>
n
n
n
n
n
n
q


# or use functions:

f(x) := {a}:sbf x + {b}:sbf x'
g(x) := {c}:sbf x + {d}:sbf x'
r o1[t] = f(o1[t-1]) + g(o1[t-2])
n
n
n
q


# Note that the 3 steps we are requesting are performed after the initial
# conditions are set.

# Of course, we could define inputs for variable from a file (of type sbf)

sbf i2 = ifile("../tests/integration/test_files/sbf-alternating_zeros_and_ones-length_10.in")
r i2[t]' = o1[t]

# We could also define the output as a file, and run a similar program again.
# In order to check the result, you could run the following command, in another console:

# cat /tmp/output_file1

sbf o2 = ofile("/tmp/output_file1")
r i1[t]' = o2[t]
0
1
0
1
0

# In the future we would provide more complex examples, but we
# guess you have a taste of how the interpreter works, at least in simple cases.
#

q
